<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>funcman's blog</title><link href="https://funcman.me/" rel="alternate"></link><link href="https://funcman.me/rss.xml" rel="self"></link><id>https://funcman.me/</id><updated>2021-12-21T11:44:12+08:00</updated><entry><title>Unity ShaderLab 个人学习笔记</title><link href="https://funcman.me/unity_shader_lab_note.html" rel="alternate"></link><published>2021-12-21T11:44:12+08:00</published><updated>2021-12-21T11:44:12+08:00</updated><author><name>funcman</name></author><id>tag:funcman.me,2021-12-21:/unity_shader_lab_note.html</id><summary type="html">&lt;p&gt;最近在回顾Unity的着色器知识。&lt;/p&gt;
&lt;p&gt;这里主要记录个人在ShaderLab中遇到的一些重点内容。&lt;/p&gt;
&lt;p&gt;这篇会做持续记录，直到完成此遍回顾。&lt;/p&gt;
&lt;h2&gt;ShaderLab的 …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;最近在回顾Unity的着色器知识。&lt;/p&gt;
&lt;p&gt;这里主要记录个人在ShaderLab中遇到的一些重点内容。&lt;/p&gt;
&lt;p&gt;这篇会做持续记录，直到完成此遍回顾。&lt;/p&gt;
&lt;h2&gt;ShaderLab的基本结构&lt;/h2&gt;
&lt;p&gt;ShaderLab是基于Cg（HLSL）的，但不等同于Cg。它在此基础上又添加了一套东西，是高于Shader的东西。&lt;/p&gt;
&lt;p&gt;某种程度可以把ShaderLab代码等同于Unity的材质。它包含了整套东西，概念上像是HLSL基础之上的D3D Effects。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Shader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ShaderName&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Properties&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 属性&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;SubShader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Pass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// 具体的Shader程序&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Pass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="c1"&gt;// 有时会用到多个Pass&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;SubShader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 因为硬件的差异，有的旧硬件不支持某些Shader&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 可能需要提供多个子Shader供Unity选择&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Unity会选择第一个能运行的子Shader&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 当所有子Shader都不能运行时&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 提供一个应急方案，双引号里是Shader名称&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 或者关掉这个功能&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 代码是：Fallback off&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Fallback&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Diffuse&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;注意这里Fallback有个隐藏影响，在Unity预计算阴影时，会在SubShader里找相关Pass，找不到就会用Fallback提供的。&lt;/p&gt;
&lt;h2&gt;Properties 属性设置&lt;/h2&gt;
&lt;p&gt;如果把Shader看成一套功能，或者广义的函数，那Properties就是Shader被提交给GPU执行时携带的参数。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;Properies&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 形式：&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// Name(&amp;quot;DisplayName&amp;quot;, PropertyType) = DefaultValue&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 例如：&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;_pos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Position&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这里&lt;code&gt;_pos&lt;/code&gt;可以在后面的Shader代码里作为“变量名”使用。&lt;/p&gt;
&lt;p&gt;PropertyType支持&lt;code&gt;Int&lt;/code&gt;、&lt;code&gt;Float&lt;/code&gt;、&lt;code&gt;Range(min,max)&lt;/code&gt;、&lt;code&gt;Color&lt;/code&gt;、&lt;code&gt;Vector&lt;/code&gt;、&lt;code&gt;2D&lt;/code&gt;、&lt;code&gt;Cube&lt;/code&gt;、&lt;code&gt;3D&lt;/code&gt;这些类型，其中后3种是纹理类型。&lt;/p&gt;
&lt;p&gt;贴图类型可以像这样：&lt;code&gt;_tex("Texture", 2D) = "white"{}&lt;/code&gt;，指定默认纹理。&lt;code&gt;"white"&lt;/code&gt;是默认纹理名称。&lt;/p&gt;
&lt;p&gt;代码种的属性会对应到Unity材质属性设置面板中。&lt;/p&gt;
&lt;h2&gt;SubShader的一般结构&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;SubShader&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 不一定要有&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Tags&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 标签块&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 键值对形式        &lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 不一定要有&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;RenderSetup&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 状态设置块&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Pass&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Pass的名字，不一定要给&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Pass1&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// Pass的Tags&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 注意和和SubRender的不一样&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 也可以有Pass自己的RenderSetup&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// CGPROGAM/ENDCG 表示该块是Cg代码&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// GLSLPROGAM/ENDGLSL 表示该块是glsl代码&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 但是不推荐使用glsl，因为Unity能够将Cg交叉编译给glsl，反之不能&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;CGPROGRAM&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 指定具体的功能函数入口&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;#pragma vertex      vert&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="cp"&gt;#pragma fragment    frag&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;float4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;vert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nl"&gt;v&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;POSITION&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SV_POSITION&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;mul&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UNITY_MATRIX_MVP&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;fixed4&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;frag&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SV_Target&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;fixed4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mf"&gt;1.0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;ENDCG&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p"&gt;...&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Tags和RenderSetup放到后面记录。&lt;/p&gt;
&lt;p&gt;其实ShaderLab还支持固定渲染管线，但是毕竟现在几乎已经没有了非可编程管线的硬件，就不做记录了。&lt;/p&gt;
&lt;h2&gt;RenderSetup 渲染状态设置&lt;/h2&gt;
&lt;p&gt;常用的状态表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;状态名&lt;/th&gt;
&lt;th&gt;设置项目&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Cull&lt;/td&gt;
&lt;td&gt;Back, Front, Off&lt;/td&gt;
&lt;td&gt;剔除模式：背面、正面、关闭&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZTest&lt;/td&gt;
&lt;td&gt;Less, Greater, LEqual, GEqual, Equal, NotEqual, Always&lt;/td&gt;
&lt;td&gt;深度测试: &amp;lt;、&amp;gt;、&amp;lt;=、&amp;gt;=、==、!=、总是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZWrit&lt;/td&gt;
&lt;td&gt;On, Off&lt;/td&gt;
&lt;td&gt;深度写入开关&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Blend&lt;/td&gt;
&lt;td&gt;原模式，目的模式&lt;/td&gt;
&lt;td&gt;打开并设置混合模式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><category term="gamedev"></category><category term="Unity"></category><category term="ShaderLab"></category></entry><entry><title>Orthodox C++</title><link href="https://funcman.me/orthodox_cpp.html" rel="alternate"></link><published>2021-12-17T09:40:38+08:00</published><updated>2021-12-17T09:40:38+08:00</updated><author><name>funcman</name></author><id>tag:funcman.me,2021-12-17:/orthodox_cpp.html</id><summary type="html">&lt;p&gt;本文翻译自&lt;a href="https://gist.github.com/bkaradzic/2e39896bc7d8c34e042b"&gt;https://gist.github.com/bkaradzic/2e39896bc7d8c34e042b&lt;/a&gt;，原作者是&lt;a href="https://twitter.com/bkaradzic"&gt;Бранимир Караџић&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;什么是Orthodox C++？&lt;/h2&gt;
&lt;p&gt;Orthodox C++（有时被称为&lt;strong&gt;C+&lt;/strong&gt;）是C++的最小子集，它改进了C，但避免了所谓的现 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;本文翻译自&lt;a href="https://gist.github.com/bkaradzic/2e39896bc7d8c34e042b"&gt;https://gist.github.com/bkaradzic/2e39896bc7d8c34e042b&lt;/a&gt;，原作者是&lt;a href="https://twitter.com/bkaradzic"&gt;Бранимир Караџић&lt;/a&gt;。&lt;/p&gt;
&lt;h2&gt;什么是Orthodox C++？&lt;/h2&gt;
&lt;p&gt;Orthodox C++（有时被称为&lt;strong&gt;C+&lt;/strong&gt;）是C++的最小子集，它改进了C，但避免了所谓的现代C++中所有不必要的东西。它与&lt;a href="https://stackoverflow.com/questions/3661237/what-is-modern-c"&gt;现代C++&lt;/a&gt;的预设恰好相反。&lt;/p&gt;
&lt;h2&gt;为什么否定现代C++?&lt;/h2&gt;
&lt;p&gt;在1990年末，我们也是当时的现代C++潮人，我们会用最新的功能。我们告诉大家就应该用这些特性。随着时间的推移，我们搞清了使用一些语言特性其实是大可不必的，这很明显，我们用的特性已经被证明是不好的（像RTTI、异常和流），非必要的代码复杂性搞得适得其反。如果你认为这是无稽之谈，那就再多等几年，到时&lt;a href="http://archive.md/2016.05.17-214038/https://www.linkedin.com/pulse/why-i-dont-spend-time-modern-c-anymore-henrique-bucher-phd"&gt;你也会讨厌现代C++&lt;/a&gt;（LinkedIn的归档文章：《为什么我不再花时间研究现代C++了》）。&lt;/p&gt;
&lt;p&gt;&lt;img alt="一副漫画" src="https://funcman.me/images/modern_cpp_caricature.png"&gt;&lt;/p&gt;
&lt;h2&gt;为什么要用Orthodox C++？&lt;/h2&gt;
&lt;p&gt;基于Orthodox C++限制所编写的代码，将更容易理解，更简单，并且可以用更老的编译器构建。用Orthodox C++子集编写的项目，将更容易被其他C++项目接受，因为Orthodox C++用到的子集，不太会与采用者的C++子集偏好相冲突。&lt;/p&gt;
&lt;h2&gt;使用Orthodox C++编写的Hello World&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hello, world&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;我该使用什么？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;类C的C++是个好的开始，如果代码不需要更多的复杂性，就不要增加不必要的C++复杂性。一般情况下，代码对于熟知C语言的人来说，应该是可读的。&lt;/li&gt;
&lt;li&gt;不要做&lt;a href="http://archive.md/2014.04.28-125041/http://www.boost.org/doc/libs/1_55_0/libs/geometry/doc/html/geometry/design.html"&gt;这事&lt;/a&gt;，Orthodox C++“设计原理”的结尾，应该紧跟“很简单，且可用。&lt;strong&gt;EOF&lt;/strong&gt;”。&lt;/li&gt;
&lt;li&gt;不要使用&lt;a href="https://web.archive.org/web/20190116034706/http://www.lighterra.com/papers/exceptionsharmful/"&gt;异常&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;异常处理是唯一的需要复杂的运行时系统支撑的C++语言特性，也是唯一的即使你不用也要付出运行时消耗的C++特性——很多时候，它会在每个对象的构造、析构以及try块的进入/退出时，额外地加入隐藏代码，还总是很大地限制编译器能做的优化。然而，C++的异常又是编译期是不执行的，所以你甚至不知道是否忘了处理一些错误的情况！从风格上看，处理错误的异常，与C的错误返回码风格并不匹配，这导致了编程风格的真实分裂，因为C++代码必然会调用底层C库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;不要使用RTTI。&lt;/li&gt;
&lt;li&gt;不要使用被C++运行时包装的C运行时，包括（&lt;code&gt;&amp;lt;cstdio&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;cmath&amp;gt;&lt;/code&gt;等），要使用C运行时（&lt;code&gt;&amp;lt;stdio.h&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;math.h&amp;gt;&lt;/code&gt;等）。&lt;/li&gt;
&lt;li&gt;不要使用流（&lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt;、&lt;code&gt;&amp;lt;stringstream&amp;gt;&lt;/code&gt;等），使用printf风格的函数代替。&lt;/li&gt;
&lt;li&gt;不要使用任何由STL分配的内存，除非你不关心内存管理。详见&lt;a href="https://www.youtube.com/watch?v=LIb3L4vKZ7U"&gt;CppCon 2015：《std::allocator归于分配，std::vector归于纠结》（Andrei Alexandrescu）&lt;/a&gt;这个讲座，以了解更多信息。&lt;/li&gt;
&lt;li&gt;不要过度使用元编程来进行学术自慰。要适度，只在必要时，在能降低代码复杂度时，使用它。&lt;/li&gt;
&lt;li&gt;对当前的标准C++&amp;lt;年份&amp;gt;中引入的任何特性，要有警惕性，最好等到这些特性在标准的下一次迭代中得到了改进。例如，C++11中的“constexpr”待到C++14中再采用（&lt;a href="http://archive.md/2018.02.01-171248/https://twitter.com/lefticus/status/958931109009440768"&gt;来自Jason Turner&lt;/a&gt;，cppbestpractices.com的站长）。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;使用现代C++&amp;lt;年份&amp;gt;的功能都还安全吗？&lt;/h2&gt;
&lt;p&gt;由于编译器、操作系统发行版等，对C++标准采用的滞后。通常不能立即开始使用那些新的、有用的语言特性。一般性指导是：如果今年是C++&lt;em&gt;年份&lt;/em&gt;+5，就可以安全地开始&lt;strong&gt;有选择性地&lt;/strong&gt;使用C++_年份_的特性。例如，如果标准是C++11，而今年&amp;gt;=2016，则基本是安全的。如果编译你的代码需要的标准是C++17，并且今年是2016年，那么显然你是在实践“简历驱动开发”方法论。如果你在做开源项目，那你就不是在造别人能用的东西。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更新&lt;/strong&gt; 截至2019年1月14日, Orthodox C++委员会已认可对C++14的使用。&lt;/p&gt;
&lt;h2&gt;还有其他类似的想法？&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Embedded_C%2B%2B"&gt;Embedded C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://archive.md/2016.08.07-162105/https://namandixit.github.io/blog/nominal-c++/"&gt;Nominal C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://archive.md/2016.08.07-162220/http://flohofwoe.blogspot.nl/2013/06/sane-c.html"&gt;Sane C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://archive.md/2017.03.19-055108/https://hacksoflife.blogspot.nl/2017/03/why-your-c-should-be-simple.html"&gt;为什么你的C++应该变简单&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.archive.org/web/20190227061553/https://c0de517e.blogspot.com/2019/02/c-its-not-you-its-me.html"&gt;C++，非你。是我。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=lTXHOOwfTAo"&gt;《保持C-mple》Alexander Radchenko于悉尼C++聚会&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.archive.org/web/20200521234043/https://satish.net.in/20180302/"&gt;一种C++方言&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;代码示例&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;任何被C++编译器通过的C源码&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/id-Software/DOOM-3-BFG"&gt;DOOM 3 BFG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/qtproject"&gt;Qt&lt;/a&gt; (使用无RTTI、无异常构建的)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ocornut/imgui"&gt;dear imgui&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/bkaradzic/bgfx"&gt;bgfx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ConfettiFX/The-Forge"&gt;TheForge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/floooh/oryol"&gt;Oryol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/networknext/sdk"&gt;Network Next SDK&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="programming"></category><category term="C++"></category><category term="编程风格"></category></entry><entry><title>改用Pelican重建这个博客</title><link href="https://funcman.me/replace_jekyll_with_pelican_for_my_blog.html" rel="alternate"></link><published>2021-09-19T03:53:55+08:00</published><updated>2021-09-19T03:53:55+08:00</updated><author><name>funcman</name></author><id>tag:funcman.me,2021-09-19:/replace_jekyll_with_pelican_for_my_blog.html</id><summary type="html">&lt;p&gt;这里简单发一篇博客，讲一下我在使用了Pelican来重建这个博客。至于回归博客的感言什么的，回头再说了。&lt;/p&gt;
&lt;p&gt;之所以不再使用Jekyll …&lt;/p&gt;</summary><content type="html">&lt;p&gt;这里简单发一篇博客，讲一下我在使用了Pelican来重建这个博客。至于回归博客的感言什么的，回头再说了。&lt;/p&gt;
&lt;p&gt;之所以不再使用Jekyll，主要是不想在电脑上安装过多的开发环境了。而且Github Pages会是不是升级Jekyll环境，我还得跟着升级，太麻烦了。&lt;/p&gt;
&lt;p&gt;Pelican的好处是非常简单，很容易生成静态页面，且我会用到Python。&lt;/p&gt;
&lt;p&gt;Pelican的用法网上很多，这里主要记录一下特别的地方。&lt;/p&gt;
&lt;p&gt;首先是图片等涉及静态路径的，需要在&lt;strong&gt;pelicanconf.py&lt;/strong&gt;里设置&lt;strong&gt;STATIC_PATHS&lt;/strong&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;并且Markdown中，引用图片需要这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;![&lt;span class="nt"&gt;JUST FUCKING DO IT&lt;/span&gt;](&lt;span class="na"&gt;{static}/images/just_fucking_do_it.png&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后是favicon，我是这么设置的，并且把&lt;strong&gt;favicon.ico&lt;/strong&gt;放在&lt;strong&gt;/content/extra/&lt;/strong&gt;目录下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;STATIC_PATHS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;images&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;EXTRA_PATH_METADATA&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra/robots.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;robots.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra/favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;favicon.ico&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;extra/CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;CNAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;显而易见，我的&lt;strong&gt;extra&lt;/strong&gt;目录下还放了&lt;strong&gt;CNAME&lt;/strong&gt;和&lt;strong&gt;rebots.txt&lt;/strong&gt;，Pelican在生成时，会把他们都放到&lt;strong&gt;output&lt;/strong&gt;目录的根部。&lt;/p&gt;
&lt;p&gt;通过运行&lt;code&gt;pelican content&lt;/code&gt;很容易就在&lt;strong&gt;output&lt;/strong&gt;下生成了全部的静态网页，把这些页面通过git更新到Github Pages上即可完成发布。因为我之前用的是Jekyll，所以我删除了原有的全部文件。另外，这个博客的Pelican的工程需要单独开仓库存储。&lt;/p&gt;
&lt;p&gt;另外，Pelican可以更换主题，可以通过网站&lt;a href="http://www.pelicanthemes.com"&gt;Pelican Themes&lt;/a&gt;找到你喜欢的主题。等我发完这篇，我就来弄主题。&lt;/p&gt;
&lt;p&gt;大致就是这样。&lt;/p&gt;</content><category term="others"></category><category term="Pelican"></category></entry><entry><title>另一种在Windows10下使用Jekyll的方法</title><link href="https://funcman.me/another_way_to_use_jekyll_on_windows_10.html" rel="alternate"></link><published>2019-03-31T08:37:45+08:00</published><updated>2019-03-31T08:37:45+08:00</updated><author><name>funcman</name></author><id>tag:funcman.me,2019-03-31:/another_way_to_use_jekyll_on_windows_10.html</id><summary type="html">&lt;p&gt;最近准备继续记博客，需要安装Jekyll环境。&lt;/p&gt;
&lt;p&gt;手头既有Mac也有PC，考虑到上班期间带的是PC，所以还是要在Windows下配置一个Jekyll环境 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;最近准备继续记博客，需要安装Jekyll环境。&lt;/p&gt;
&lt;p&gt;手头既有Mac也有PC，考虑到上班期间带的是PC，所以还是要在Windows下配置一个Jekyll环境。&lt;/p&gt;
&lt;p&gt;按照Jekyll官网的方法，是去安装RubyInstaller。但是，RubyInstaller本身是基于MSYS2的，我的PC已经装了MSYS2，不想再多搞一套，于是决定基于MSYS2安装Ruby和Jekyll。&lt;/p&gt;
&lt;p&gt;MSYS2类似Cygwin（其实就是一个Cygwin分支），可以让用户在Windows下使用UNIX环境的套件。这里先介绍一下相关概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Pacman是一套流行于Arch Linux下的软件包管理软件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MinGW是一套在Windows使用的GNU工具链，MinGW-w64是新一代MinGW，同时支持32位和64位。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MSYS是为帮助MinGW在Windows下使用，随MinGW提供的一套基本的POSIX操作环境。它是基于较旧的Cygwin项目创建的一个分支。MSYS2和MSYS并不是同一个项目的不同版本，它们各为独立项目。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MSYS2集成了Pacman和MinGW-w64。&lt;/p&gt;
&lt;p&gt;我们在中国使用MSYS2，最好设置一下国内的镜像，网上的文章基本都是让用&lt;a href="https://lug.ustc.edu.cn/wiki/mirrors/help/msys2"&gt;中科大的镜像&lt;/a&gt;，但目前他们的东西有点问题，只好改用&lt;a href="https://mirrors.tuna.tsinghua.edu.cn/help/msys2"&gt;清华的镜像&lt;/a&gt;。可惜了，实际上中科大离我很近。&lt;/p&gt;
&lt;p&gt;按照页面上的说明设置好镜像，并执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pacman -Syu
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在最后提示关闭MSYS2时，点窗口的X进行关闭，再去MSYS2安装目录里运行一下autorebase.bat。然后打开MSYS2，执行一下更新：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;pacman -Su
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;之后就安装一系列软件，我这里是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;pacman&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="n"&gt;vim&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;devel&lt;/span&gt; &lt;span class="n"&gt;mingw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;w64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;toolchain&lt;/span&gt; &lt;span class="n"&gt;mingw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;w64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt; &lt;span class="n"&gt;mingw&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;w64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x86_64&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;ruby&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;native&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;package&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;installer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;之所以是使用mingw64/mingw-w64-x86_64-ruby，而不是msys/ruby，是因为我先用它试了一番，在Gem安装Jekyll时总是有个库编不过去。我没有深究下去，先这么着吧，以后有空再找找解决方法。&lt;/p&gt;
&lt;p&gt;安装了这个版本的Ruby之后，需要将&lt;a href="https://github.com/msys2/msys2/wiki/MSYS2-introduction#subsystems"&gt;shell type&lt;/a&gt;设为mingw64进入MSYS2环境，也就是从“MSYS2 MinGW 64-bit”而不是“MSYS2 MSYS”进。前者会把/mingw64/bin加入到PATH里，而此版本Ruby安装在/mingw64/bin中。&lt;/p&gt;
&lt;p&gt;然后，我用Gem安装Bundler和Jekyll：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;gem install bundler jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;我已经有个很久没写过的旧博客，需要升级一下，所以进入博客的目录，执行了一下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;bundle update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;据说升级Gem是一件很折腾人的事情，Ruby程序员往往一次升级单个Gem，一次性bundle update，容易出问题。我也是反复在bundle install和bundle update之间折腾，才搞定了这件事。具体可以查一下&lt;a href="https://bing.com/search?q=bundle%20install%20bundle%20update%20%E5%8C%BA%E5%88%AB"&gt;bundle install和bundle update之间的区别&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;升级完成之后，就可以继续&lt;a href="https://jekyllrb.com/docs/step-by-step/01-setup"&gt;用Jekyll写博客&lt;/a&gt;了。&lt;/p&gt;
&lt;p&gt;PS：&lt;/p&gt;
&lt;p&gt;我为了复习怎么用Jekyll，粗略的看了一下&lt;a href="https://jekyllrb.com/docs/step-by-step/01-setup"&gt;Jekyll Step by Step Tutorial&lt;/a&gt;。它在第一步里讲使用jekyll serve来运行Jekyll，这和我们平常使用bundle exec jekyll serve的方式有点不一样。实际上在第十步里有解释&lt;a href="https://jekyllrb.com/docs/step-by-step/10-deployment/#gemfile"&gt;怎么一回事&lt;/a&gt;。我也不是很熟悉Ruby，使用Jekyll的很多人估计也是这样。反正Bundler大概是一个处理相同Gem的不同版本被同时引用的工具，我们记得用它就行了。&lt;/p&gt;
&lt;p&gt;另外，这一篇虽然标题是Windows10，并不是说不适用于之前的Windows版本，我只是没有试过。&lt;/p&gt;</content><category term="others"></category><category term="Jekyll"></category><category term="Ruby"></category><category term="编程环境"></category></entry><entry><title>“你是如果管理内存的？”</title><link href="https://funcman.me/how_do_you_manage_memory.html" rel="alternate"></link><published>2016-07-22T04:46:07+08:00</published><updated>2016-07-22T04:46:07+08:00</updated><author><name>funcman</name></author><id>tag:funcman.me,2016-07-22:/how_do_you_manage_memory.html</id><summary type="html">&lt;p&gt;还没找到工作，面了几家，都没下文。我脸皮厚，写点总结发博客。&lt;/p&gt;
&lt;p&gt;像标题这样的面试问题，这些天遇到不止一两次。第一次我略 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;还没找到工作，面了几家，都没下文。我脸皮厚，写点总结发博客。&lt;/p&gt;
&lt;p&gt;像标题这样的面试问题，这些天遇到不止一两次。第一次我略懵，毕竟好久没被面了，没什么准备，所以没做出全面的回答。不过，就算到现在，我也没能在面试时把这个问题回答得很到位。可能这个问题对我来说已经不是什么困扰，平时想得也不多，遇到了我也能解决。这里做一下笔记，这样再遇到这个问题，我可以表现得好一些。&lt;/p&gt;
&lt;p&gt;首先破题，为什么需要考虑管理内存的事，因为C/C++主要提供的是一种很原始的手工释放内存的方式。人难免出错，如果申请了内存，最后忘记释放，就会造成内存泄漏。此外，对于那些在好几个模块之间共享的内存，怎样才能做到正确且合理地释放，也是个问题。如果其中某个模块做了解引用（dereference）操作，还要专门去通知别的模块，再根据情况的不同决定是否需要真的释放内存，那模块之间必然是紧耦合的。所以，并不是小心谨慎就能解决好内存管理问题，好的内存管理一定要借助合适的方法和工具。&lt;/p&gt;
&lt;p&gt;我这里第一个要谈的工具，是内存池。内存池实际上是在一开始申请一大块内存，再将这大块的内存按照一定规则划分成几个尺寸的小块内存集合。同一尺寸的小块内存用一个叫FreeList的东西串起来，有几种尺寸就搞几条FreeList。当我们需要内存时，根据需要的尺寸，就近找到一条合适的FreeList（比如系统内有8 Bytes和16 Bytes等尺寸的FreeList，我们需要9 Bytes的内存，那么就挑16 Bytes的FreeList），从中拿一个小块即可。当这个内存不再使用时，被释放的过程，就是将它还回FreeList的过程。当然，内存池有其它的实现方式，但也是差不多的东西，大同小异。&lt;/p&gt;
&lt;p&gt;内存池技术并没有减免程序员的内存释放工作，那它带来了什么好处呢。由于它要考虑的系统的分配器少一点，所以一般效率会高那么一点。同时保证了一定的内存对齐，这里的对齐并不是为了CPU更高效的寻址，而是一定程度上可以避免内存碎片。如果分配内存时没有对齐，最终内存中的连续空闲块会越来越小，分配大块内存时会因为找不到尺寸足够的连续空闲内存，而失败。内存对齐分配的内存池技术，很大程度能够缓解这个问题。&lt;/p&gt;
&lt;p&gt;实际上，内存池技术在很多开源内存分配器就带了，甚至操作系统内核里就有。除非是在极端应用场景，否则没有必要自己自制内存池。我觉得如果真遇到这样的场景，恐怕就不是内存池技术能解决的了，更静态一些、固定一些的分配方案，会更好一点。&lt;/p&gt;
&lt;p&gt;如果自制内存池，可以同时集成一个内存跟踪器。内存跟踪器可以帮助程序员找到内存泄漏。前面已经说到了，内存泄漏是由于没有及时释放内存所致。跟踪器Hook在分配器上，登记每一次内存的分配操作。同时Hook在释放操作上，每次释放时注销之前的登记。当进程或模块退出时，可以查看跟踪器中还有没有登记项目，如果有，说明有内存存在泄漏的情况。根据登记信息，我们可以知道哪里申请的内存最后没有被释放，进而我们可以找到放置释放代码的地方。内存跟踪器是和内存池互为独立的工具，并不依赖内存池存在。&lt;/p&gt;
&lt;p&gt;对于很多应用场景来说，我们可以借助其数据的关联结构，来减轻手工内存释放的痛苦程度。这些系统中，数据往往成父子关联关系：比如GUI系统中，按钮是窗体的子对象（不是说子类）；再如游戏场景树中，物件实体作为子对象挂在场景根节点上，物件实体又可以挂子物件。对于这样的结构，可以将子对象的释放操作交给父对象来完成。这样，只要树状结构中一个节点不再使用（即需要被移除并释放），那么这个节点连同其后代，就可以以一种遍历子树的方式，全部被释放掉。&lt;/p&gt;
&lt;p&gt;很多时候，对象之间的关系，并没有呈现出一种像树状的规则的结构。这些对象被不同模块所持有，模块之间关系往往是平行的。那么如何在不制造耦合的情况下，减轻内存释放的难度？这就可以使用引用计数技术了：每次申请一块内存，将这块内存的计数器标为1；每次对这块内存做引用传递时，将这块内存的计数器加1；每次对这块内存做解引用时，将计数器减1；当计数器减到0时，就可以真正释放这块内存了。这样，是否需要释放，是在引用计数器内部实现的，和具体的引用对象的模块无关，是正交的，不存在增加模块间耦合的问题。&lt;/p&gt;
&lt;p&gt;对于最简单的引用计数器实现来说，加一、减一操作，往往要我们手工进行。即使将加一、减一隐藏在构造、析构、赋值运算符中，依然需要我们手工写释放操作来进一步触发减一机制。要解决这一问题，我们可以引入智能指针技术：栈对象在出作用域时会自动触发析构，智能指针对象其实就是一种栈对象，它能自动触发减一操作。实际上，新的C++1x的std::shared_ptr，就是一种结合了引用计数的高级智能指针。&lt;/p&gt;
&lt;p&gt;引用计数技术有个问题，就是一旦对象之间出现循环引用的关系时，就会出问题，无法正常的释放。因为对象的引用计数，由于循环引用的存在，无法降为0。这时需要手工将循环引用关系打断，才能正常的释放。而在真实的编码中，我们会极力避免循环引用的出现，所依赖的手段是好的程序结构。&lt;/p&gt;
&lt;p&gt;对于C/C++的内存管理，一般不谈论GC垃圾回收。我不把引用计数归为GC，这里说的GC是指使用标记法之类的那种GC。它们普遍比引用计数低效一些，C/C++这种比较偏向执行效率的语言，人们不太将它与GC一起谈。虽然C/C++也是有GC库可用的，但是一旦使用GC库，GC库分配的内存，就必须由GC库管理，且缺乏语言的语法支持。至于细节，不同的GC库使用不同的算法，和那么支持GC的语言并没有太多本质上的区别，其特点可以参考其它语言。GC对比引用计数机制，有一个好处，就是不担心循环引用。&lt;/p&gt;
&lt;p&gt;对于使用什么手段来解决内存管理问题，不能一概而论，没有方法是最优的。优化程序结构，可以在大的结构节点，使用手工申请、释放的方式控制内存；可以在系统逻辑主干部分，设计结构性强的对象关系，系统地进行对象的释放。不过度设计，减少不必要的机制，比如不滥用Lazy初始化，固化对象生命周期的次序，减少发生循环引用的可能。需要我们编写复杂代码的地方，应该是对性能有严格要求的地方。但即使是游戏编程，也不是所有地方都对性能有强烈的需求。对于那些真正有需求的地方，我们则采取一些特别的手段来管理内存，且要付出的代价不仅仅在编码实现上，还需要有足量的测试，一切根据实际出发。而多数地方，我们要采用现成的、性价比好的方法。&lt;/p&gt;</content><category term="programming"></category><category term="面试"></category><category term="内存管理"></category><category term="内存池"></category></entry><entry><title>✔ JUST DO IT</title><link href="https://funcman.me/just_do_it.html" rel="alternate"></link><published>2016-07-12T17:07:07+08:00</published><updated>2016-07-12T17:07:07+08:00</updated><author><name>funcman</name></author><id>tag:funcman.me,2016-07-12:/just_do_it.html</id><summary type="html">&lt;p&gt;最近辞职了，准备回游戏业，在找工作。&lt;/p&gt;
&lt;p&gt;其实游戏业给我的，是一种失败感，尤其最近。比如斧子的惨状。再如手游审批这事，其实 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;最近辞职了，准备回游戏业，在找工作。&lt;/p&gt;
&lt;p&gt;其实游戏业给我的，是一种失败感，尤其最近。比如斧子的惨状。再如手游审批这事，其实我对这块不感冒，但也有殃及池鱼的感觉。总结起来，就是一个没劲。主机解禁没带来多少改变，现在又闹这一出，一代又一代的人深陷魔掌无法脱出。&lt;/p&gt;
&lt;p&gt;特佩服也特感谢一些没心没肺的观点——自己做好了不怕外界环境恶劣。这话是对的，比如放在斧子游戏机这事上，不是大家不挺你，是有些事你自己作死。能这么想的人，都是内心坚毅的人。而且，作为弱者，不干了这碗鸡汤，还能怎样。&lt;/p&gt;
&lt;p&gt;以前老大批评我想太多，我很认同。业内如何，轮不上我这样的去想，想了也没用。我是程序员，不专注在自己手艺上是不行的。你看老罗，虽然手机做得还行，至少做出来了，但是总给人一种只会耍嘴炮的感觉，间接也耽误了锤子的行情。所以呢，我还是只专注于技术，不然哪一天风云幻变，做出中国巫师、中国神海的人里就没有我了（笑）。&lt;/p&gt;
&lt;p&gt;十岁想做游戏，二十岁在做游戏，三十岁再回来。觉得对的事，就去做吧。&lt;/p&gt;
&lt;p&gt;&lt;img alt="JUSE FUCKING DO IT" src="https://funcman.me/images/just_fucking_do_it.png"&gt;&lt;/p&gt;</content><category term="gamedev"></category><category term="职业"></category><category term="事业"></category><category term="工作"></category></entry><entry><title>如何在OSX El Capitan下使用基于CH34x芯片的USB串口适配线</title><link href="https://funcman.me/how_to_use_ch34x_usb_to_serial_adapter_on_osx_el_capitan.html" rel="alternate"></link><published>2015-12-10T07:47:23+08:00</published><updated>2015-12-10T07:47:23+08:00</updated><author><name>funcman</name></author><id>tag:funcman.me,2015-12-10:/how_to_use_ch34x_usb_to_serial_adapter_on_osx_el_capitan.html</id><summary type="html">&lt;p&gt;淘宝上有很多廉价的USB转串口的适配线，这其中不少使用的是南京的沁恒公司的CH34x芯片。&lt;/p&gt;
&lt;p&gt;我们可以在“关于本机”-“系统报告 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;淘宝上有很多廉价的USB转串口的适配线，这其中不少使用的是南京的沁恒公司的CH34x芯片。&lt;/p&gt;
&lt;p&gt;我们可以在“关于本机”-“系统报告”-“硬件”-“USB”里查看适配线的VID（厂商ID），来确定适配线是否基于CH34x芯片。CH34x的VID是0x1a86，我这根的PID（产品ID）是0x7523，你的PID可能不同，0x5523也是一个可用的PID。&lt;/p&gt;
&lt;p&gt;确定芯片后，就可以去找驱动程序了。沁恒的网址是&lt;a href="http://www.wch.cn"&gt;http://www.wch.cn&lt;/a&gt;，我们可以从上面找到我们需要的驱动。&lt;a href="http://www.wch.cn/download/CH341SER_MAC_ZIP.html"&gt;Mac的驱动也是有的&lt;/a&gt;，不过太老了，未经签名，所以通过不了苹果在OSX 10.11上加入的SIP&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt;保护技术。如果直接安装这个驱动，肯定是用不了的。必须屏蔽SIP对kext&lt;sup id="fnref:2"&gt;&lt;a class="footnote-ref" href="#fn:2"&gt;2&lt;/a&gt;&lt;/sup&gt;的保护。&lt;/p&gt;
&lt;p&gt;设置SIP，我们需要用到csrutil，它就是SIP的配置修改工具。使用csrutil，必须进入恢复模式。恢复模式的进入方法是：开机（重启）时，同时按CMD键和R键。进入恢复模式之后，在“实用工具”里找到“终端”，在终端里输入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;csrutil enable --without kext
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后重启。这时再去安装从沁恒公司网站下载的那个Mac驱动。安装完成后，再次重启，进入系统之后就能在&lt;strong&gt;/dev&lt;/strong&gt;下面找到&lt;strong&gt;tty.wchusbserial14130&lt;/strong&gt;了。注意，因为我的PID是0x7523，所以tty.wchusbserial后面的数字是14130（即0x7523的十进制数）。你也可能看到别的类似的设备文件名。&lt;/p&gt;
&lt;p&gt;这样操作之后，就能正常使用CH34x适配线了。但是也丧失了SIP对系统的某些保护，降低了系统的安全性。如果手头宽裕，还是建议购买贵一些的，持续支持Mac系统的适配线。购买之前，先搞清楚要买的线能不能很方便的在最新的Mac上使用。不要像我，买的时候没花时间直接下单，到货了折腾半天才用起来。&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn:1"&gt;
&lt;p&gt;System Integrity Protection&amp;#160;&lt;a class="footnote-backref" href="#fnref:1" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn:2"&gt;
&lt;p&gt;OSX的内核扩展，驱动一般是以这种形式存在的&amp;#160;&lt;a class="footnote-backref" href="#fnref:2" title="Jump back to footnote 2 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</content><category term="programming"></category><category term="OSX El Capitan"></category><category term="CH34x"></category><category term="串口"></category></entry><entry><title>如何背单词</title><link href="https://funcman.me/how_to_remember_english_words.html" rel="alternate"></link><published>2015-11-25T06:44:07+08:00</published><updated>2015-11-25T06:44:07+08:00</updated><author><name>funcman</name></author><id>tag:funcman.me,2015-11-25:/how_to_remember_english_words.html</id><summary type="html">&lt;p&gt;我是个英语很烂的人，所有关于英语的能力，都来自于技术工作中对英文的不得不进行的接触。因为英语太烂，也失去了一 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;我是个英语很烂的人，所有关于英语的能力，都来自于技术工作中对英文的不得不进行的接触。因为英语太烂，也失去了一些不错的机会。怎么学英语，我是不懂的。至于背单词，大多数英语好的人，应该都去尝试过。我也尝试过，但一直不得其法。&lt;/p&gt;
&lt;p&gt;现在，为了完成学业，我又准备拿起单词书，再次尝试一下。在开始做这件事时，我想了一下，到底是什么阻碍了我之前在背单词上的持续努力？&lt;/p&gt;
&lt;p&gt;我不是没有目的的去学习一个东西，相反，学好了英语对我来说有很多积极的意义。在我内心里，是有学习的冲动的。所以，之前的不顺利，应该是方法上出了问题。&lt;/p&gt;
&lt;p&gt;背单词是一种记忆活动，在记忆领域，人们有一个普遍的共识，就是人脑记忆新事物遵循着“艾宾浩斯记忆曲线”。我之前也采用了遵循这种规律的记忆复习方法，相信在这类方法的应用上，没有什么问题。&lt;/p&gt;
&lt;p&gt;在还没有想清楚这个问题的时候，我还在找背单词的工具。幸运的是我找到了一个叫&lt;a href="https://itunes.apple.com/app/id888483369/"&gt;墨墨背单词&lt;/a&gt;的手机应用，帮助我弄清了这个问题。&lt;/p&gt;
&lt;p&gt;人有一种既贪婪又懦弱的通性。人做一件事情，是由欲望驱使的，欲望总是使人在得到的同时还想得到更多。人的能力有限，无法驾驭所有，当欲望发展成贪婪，无法得到完全的满足时，人的懦弱的本性就开始产生作用：放弃掉全部追求。&lt;/p&gt;
&lt;p&gt;这就是贪婪导致毁灭的道理。在之前的背单词过程中，我渴望着把每一个单词记住记牢，用法、特例、近义词、反义词等等通通收入脑子里。实际上我做不到，也没有产生什么益处。这样背完一百个单词后，我感觉不到任何提高。我觉得自己在做没有意义的事，于是放弃就成了轻易且自然的事情。&lt;/p&gt;
&lt;p&gt;所有智慧都在说一件事，克制住欲望。背单词也一样，我不需要记住那么多，甚至不需要记住每一个单词的拼写。我只需要对这些单词有种“我接触过”的印象，就能在英文阅读中有&lt;strong&gt;能力提升的感觉&lt;/strong&gt;。然后，当我发现某些单词需要经常书写时，再去记住它们的拼写。如此循序渐进，总能获取到学习的正面反馈，也就有了不断坚持下去的&lt;strong&gt;动力&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;在&lt;a href="https://itunes.apple.com/app/id888483369/"&gt;墨墨背单词&lt;/a&gt;这个应用中，“记住一个单词”的定义是&lt;strong&gt;由用户决定&lt;/strong&gt;的。用户只需要告诉应用，对于某个单词，在一次测试过程中，是记住了还是忘记了，或是模模糊糊记不清。然后应用根据用户的记忆反馈，为用户提供这个单词在下次出现的时机和频率。至于用户怎么定义“记住了”，完全由用户根据自己追求的目标进行判断。对于我来说，看到一个英文单词，能想到它的中文意思，那就是记住了。就这么简单。&lt;/p&gt;</content><category term="others"></category><category term="英语"></category><category term="背单词"></category></entry><entry><title>如何正确编写苹果健康程序</title><link href="https://funcman.me/how_to_save_data_to_apple_health_correctly.html" rel="alternate"></link><published>2015-10-27T10:45:00+08:00</published><updated>2015-10-27T10:45:00+08:00</updated><author><name>funcman</name></author><id>tag:funcman.me,2015-10-27:/how_to_save_data_to_apple_health_correctly.html</id><summary type="html">&lt;p&gt;苹果健康使用HealthKit接收数据的提交和读取，很多时候，我们从程序编写的角度，把两者看做同一个东西，下文简称HK。&lt;/p&gt;
&lt;p&gt;HK在权限 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;苹果健康使用HealthKit接收数据的提交和读取，很多时候，我们从程序编写的角度，把两者看做同一个东西，下文简称HK。&lt;/p&gt;
&lt;p&gt;HK在权限管理方面，有个很特（guai）别（yi）的地方，也是一个坑，即：读权限和写权限是完全分离的，存在可写但不可读的情况。由于权限控制权完全在用户手中，即使程序同时请求读写权限，也可能只是获得到写权限，而无读权限。这就造成一个问题：程序无法直接知道HK里已经存有哪些数据，如果不想办法规避这个坑，同一条数据有可能被重复写入HK。&lt;/p&gt;
&lt;p&gt;为了避免重复写入数据，我们需要在APP端甚至云端的数据存储中，对每条需要同步到HK的数据，进行标记。这样，才能将HK的数据同步做到最佳。&lt;/p&gt;
&lt;p&gt;我个人对HK本身的设计有个想法：HK应该自动把同一个数据源提交来的相同数据进行合并。如果几个数据，它们的起止时间，数值等，都是相同的，把它们看做同一个数据，是完全合理的。其实HK对于重复数据，是有一个融合算法的，并不会把数据进行累加。但是，用户点开“显示所有数据”时，看到有数据重复的情况，多多少少心里会有些膈应，会怪罪APP端。苹果对HK的数据隐私，看得格外重要，才设计出如此怪异的权限机制，牺牲了不少的可用性。&lt;/p&gt;</content><category term="programming"></category><category term="苹果健康"></category><category term="HealthKit"></category></entry><entry><title>谈一谈个人在接下来几年的游戏技术方向</title><link href="https://funcman.me/talk_about_my_next_interests_in_game_technologys.html" rel="alternate"></link><published>2015-01-08T14:46:00+08:00</published><updated>2015-01-08T14:46:00+08:00</updated><author><name>funcman</name></author><id>tag:funcman.me,2015-01-08:/talk_about_my_next_interests_in_game_technologys.html</id><summary type="html">&lt;p&gt;我对目前火爆的手游和之前火爆的端游、页游通通不感兴趣。除非项目非常nice，或者团队的人非常有趣，否则我不太会积极 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;我对目前火爆的手游和之前火爆的端游、页游通通不感兴趣。除非项目非常nice，或者团队的人非常有趣，否则我不太会积极地回到游戏行业中。理想的状态是，我是一群酷爱游戏且专业的人的之一，做着一款看着就好玩的电视、电脑游戏。虽然Xbox ONE已经来中国了，PS4也要上市了，但是中国电视游戏的春天恐怕还要等上几年。所以，我考虑在这几年积攒一下技术。&lt;/p&gt;
&lt;p&gt;所谓的积攒技术，就是做一个2D引擎，其实也就是造轮子。如果是即刻投身商业开发，那么造轮子，一定是件可耻的事情。Unity或者cocos2d-x已经足够好了。而这对于我来说，只是个人私事。理由不具体直接解释了，反正我就是爱折腾。&lt;/p&gt;
&lt;p&gt;我个人很喜欢Unity的快捷和强大，但也感到如果Unity和cocos2d-x一样开源，很多事会好办很多。而对于后者，我不太喜欢它的设计。cocos2d吸收了很多Cocoa的特点，但对于一个游戏引擎来说，有些地方还是简洁点好。&lt;/p&gt;
&lt;p&gt;对于一个2D引擎来说，图形底层并不复杂，只要把Sprite做出来，这个引擎就能用来做游戏了。一个成熟的2D引擎，必不可少要有一套动画系统。以前的2D游戏多采用序列帧，现在基本上是实时演算的关键帧插值动画。动画编辑器的开发量是不小的，我考虑使用Flash作为动画编辑器，用JSFL做数据导出。Flash可做的事情非常多，比如还可以作为UI布局器使用，甚至粒子特效编辑器也省了。使用通用编辑器来取代内部编辑器，是节省成本的一个好方法。&lt;/p&gt;
&lt;p&gt;我个人是很喜欢Unity的，尤其是它的Editor，和Component系统。UnityEditor级别的开发，不是几个人能完成的，所以就不是我要借鉴的对象。我要学习的是Component系统。游戏是OO设计最经典的应用场景之一（另一个是GUI），Component系统是我见过的最好理解的游戏OOD。好理解意味着好用，开发快捷方便。&lt;/p&gt;
&lt;p&gt;我考虑在这个引擎中深度应用Lua语言，而不是像我以前的项目那样，只是把Lua作为写回调功能的工具。我偏向C/C++只为Lua提供回调功能，单纯去解决真正的性能问题。引擎应用程序员是面向Lua工作的，C/C++只需要做好核心的即可。&lt;/p&gt;
&lt;p&gt;以上说的是2D引擎技术，此外，我还对服务端技术感兴趣，这是我没有真正做过的，需要去常识的。我曾经了解过一段时间node.js，并且网易的一群人还弄出了一个Pomelo，但我不考虑node。JavaScript的爱好者很喜欢摆弄异步回调，node上也充满了这种风格的东西。但异步毕竟是个烧脑的东西，我更喜欢简单直接的。我对go和云风的skynet很感兴趣，尤其后者是我喜欢的“C+Lua”。&lt;/p&gt;</content><category term="gamedev"></category><category term="技术选型"></category></entry><entry><title>关于有理数、无理数中的“理”字</title><link href="https://funcman.me/about_logos_of_the_rational_number_and_irrational_number.html" rel="alternate"></link><published>2014-12-17T15:00:00+08:00</published><updated>2014-12-17T15:00:00+08:00</updated><author><name>funcman</name></author><id>tag:funcman.me,2014-12-17:/about_logos_of_the_rational_number_and_irrational_number.html</id><summary type="html">&lt;p&gt;我们知道有理数就是可以用整数比值表示的数字。但对于无理数，我们就不好下定义，只好说不能用整数比值表示的数字 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;我们知道有理数就是可以用整数比值表示的数字。但对于无理数，我们就不好下定义，只好说不能用整数比值表示的数字就是无理数。&lt;/p&gt;
&lt;p&gt;对于有理数、无理数中间这个“理”字，我们也不太容易理解，数字不具备位格，怎么还能讲道理。其实这两个名词，来自日文。我们知道，很多汉语里采用的日式外来词，和汉语字词意思多少有些出入，理解起来就会有点“无厘头”。&lt;/p&gt;
&lt;p&gt;我在网上随便搜索了一下，据说这个日式外来词，在翻译时也受到了徐光启和利玛窦翻译的《几何原本》的影响。根据网上的说法，在徐、利版本的《几何原本》中，将比值作为“理”字翻译出来。但是我不太确信这样的解释，我不清楚文言文中的“理”字可作比值的意思。&lt;/p&gt;
&lt;p&gt;我所知道的，这个“理”字，在最早希腊文中，是用logos表示。logos大概就是事物本质规律的意思，也有话语、可被语言表达的事物的意思。圣经里，面向希腊语地区读者的《约翰福音》，用logos来关联上帝的话语，中文版本圣经里翻作“道”字。而拉丁文，logos被转译为ratio，也就是英文中的比值和rational（可理解的）的词根。我不知道logos有没有比值的意思，retio既有比值的意思，也有可被理解的意思。&lt;/p&gt;
&lt;p&gt;所以，至少我们可以把有理数和无理数，在字面上理解为可以理解的数和不可理解的数，这样多少可以说得通。&lt;/p&gt;
&lt;p&gt;无论在圣经中，还是在发现有理数的古希腊毕达哥拉斯学派的眼里，logos都是一个高大上的词。所以，发现无理数这样不logos的数的希伯索斯，被认为亵渎了神圣，最后被狂热的毕门学者投入了地中海。当然，这和基督教没有关系，基督教是在其后几百年才有的。很多科学史上的迫害，问题不在于信仰什么，而是拜宗教狂热所赐，不管是基督教下的，还是这种拜科学教背景的。&lt;/p&gt;
&lt;p&gt;乱七八糟讲了这么多，回过头来，我们还是很难通过字面和简单的语言，来提供一种本文第一段第二句之外的对无理数的定义或解释。摊手~&lt;/p&gt;</content><category term="mathematics"></category><category term="有理数"></category><category term="数学"></category></entry><entry><title>关于std::list的排序</title><link href="https://funcman.me/about_sqrt_of_std_list.html" rel="alternate"></link><published>2010-09-04T12:58:00+08:00</published><updated>2010-09-04T12:58:00+08:00</updated><author><name>funcman</name></author><id>tag:funcman.me,2010-09-04:/about_sqrt_of_std_list.html</id><summary type="html">&lt;p&gt;std::list和std::vector不同，无法使用STL算法库里的sort()，因为std::list不支持随机访问（random access）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// std::list排序示例&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;list&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// 它是 …&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;std::list和std::vector不同，无法使用STL算法库里的sort()，因为std::list不支持随机访问（random access）。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// std::list排序示例&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;list&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="c1"&gt;// 它是个仿函数&lt;/span&gt;
&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;mycmp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;operator&lt;/span&gt;&lt;span class="p"&gt;()(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;il&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;time_t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;srand&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Before: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;rand&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;il&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push_back&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ia&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;il&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mycmp&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;After: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;iterator&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;il&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;il&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="programming"></category><category term="STL"></category><category term="list"></category><category term="容器"></category></entry><entry><title>一个Win32控制台类</title><link href="https://funcman.me/win32_console_class.html" rel="alternate"></link><published>2010-06-06T10:54:00+08:00</published><updated>2010-06-06T10:54:00+08:00</updated><author><name>funcman</name></author><id>tag:funcman.me,2010-06-06:/win32_console_class.html</id><summary type="html">&lt;p&gt;对于编写Win32程序，尤其是游戏这种实时性高的程序来说，断点调试未必是最合适的调试方法。很多时候，我们更渴望看到实 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;对于编写Win32程序，尤其是游戏这种实时性高的程序来说，断点调试未必是最合适的调试方法。很多时候，我们更渴望看到实时打印的调试信息。&lt;/p&gt;
&lt;p&gt;一种方法是使用VC的调试函数OutputDebugString()，将信息输出给VC调试控制台。还有一种方法是在Win32控制台工程的基础上创建窗口程序（入口为main而非WinMain）。可以用宏来控制编译，使Debug版本时有控制台，Release版本没有控制台，像这样：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// 一个简单的方法&lt;/span&gt;
&lt;span class="cp"&gt;#ifndef _DEBUG&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WINAPI&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;WinMain&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HINSTANCE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HINSTANCE&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;hPrevInstance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;LPSTR&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;lpCmdLine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nCmdShow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#else&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;&lt;span class="c1"&gt;//_DEBUG&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;但这种方法并不灵活，这里介绍一个直接用Win32 API获得控制台的方法。一切皆在代码中：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// DbgCon.h&lt;/span&gt;

&lt;span class="cp"&gt;#ifndef DBGCON_H&lt;/span&gt;
&lt;span class="cp"&gt;#define DBGCON_H&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;windows.h&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="c1"&gt;;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;DbgCon&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;DbgCon&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;DbgCon&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;Hide&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;Top&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nf"&gt;NoTop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;HWND&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;HWnd_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;ConIn_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;FILE&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;ConOut_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#endif&lt;/span&gt;&lt;span class="c1"&gt;//DBGCON_H&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// DbgCon.cpp&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;DbgCon.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="n"&gt;DbgCon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;DbgCon&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;HWnd_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;ConIn_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="n"&gt;ConOut_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 申请一个控制台&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;AllocConsole&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;HWnd_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GetConsoleWindow&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 把管道转入该控制台&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;freopen_s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ConIn_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CONIN$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;r+t&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stdin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;freopen_s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ConOut_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;CONOUT$&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;&amp;quot;w+t&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;// 去掉控制台窗口上的关闭功能&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="c1"&gt;//（控制台窗口上的关闭操作会关掉整个进程）&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;HMENU&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HMenu&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;GetSystemMenu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HWnd_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;FALSE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;RemoveMenu&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HMenu&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SC_CLOSE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;MF_BYCOMMAND&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;DbgCon&lt;/span&gt;&lt;span class="o"&gt;::~&lt;/span&gt;&lt;span class="n"&gt;DbgCon&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;FreeConsole&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ConOut_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ConOut_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ConIn_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="n"&gt;fclose&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ConIn_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DbgCon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 显示控制台窗口（恢复到正常状态）&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ShowWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HWnd_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SW_SHOWNORMAL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DbgCon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Hide&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 隐藏控制台窗口&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;ShowWindow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HWnd_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SW_HIDE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DbgCon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;Top&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 置顶控制台窗口&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;SetWindowPos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HWnd_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HWND_TOPMOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SWP_NOMOVE&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;SWP_NOSIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DbgCon&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;NoTop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="c1"&gt;// 取消置顶&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;SetWindowPos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HWnd_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;HWND_NOTOPMOST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;SWP_NOMOVE&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;SWP_NOSIZE&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="programming"></category><category term="C++"></category><category term="Win32"></category><category term="控制台"></category></entry><entry><title>C语言对数据的隐藏封装</title><link href="https://funcman.me/data_hiding_in_c.html" rel="alternate"></link><published>2010-05-16T19:48:00+08:00</published><updated>2010-05-16T19:48:00+08:00</updated><author><name>funcman</name></author><id>tag:funcman.me,2010-05-16:/data_hiding_in_c.html</id><summary type="html">&lt;p&gt;在C++中，如果我们想把数据结构隐藏起来，只为用户提供接口，可以通过实现继承接口类的方式到达目的。那C中，可以采用 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;在C++中，如果我们想把数据结构隐藏起来，只为用户提供接口，可以通过实现继承接口类的方式到达目的。那C中，可以采用什么方式呢。下面有一例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// demo.h&lt;/span&gt;

&lt;span class="cp"&gt;#ifndef DEMO_H&lt;/span&gt;
&lt;span class="cp"&gt;#define DEMO_H&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Demo&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Demo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Demo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;DemoCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;DemoDestory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Demo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;DemoShow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Demo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#endif&lt;/span&gt;&lt;span class="c1"&gt;//DEMO_H&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// demo.c&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;demo.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="nc"&gt;Demo_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;Demo_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;Demo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;DemoCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Demo_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Demo_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Demo_&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;num_&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Demo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;DemoDestory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Demo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;DemoShow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Demo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Demo_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;num_&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;// main.c&lt;/span&gt;

&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;quot;demo.h&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;Demo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;DemoCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;777&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;DemoShow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;DemoDestory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content><category term="programming"></category><category term="C语言"></category><category term="接口"></category><category term="封装"></category></entry><entry><title>艾未未作品《4851》观后感</title><link href="https://funcman.me/review_of_4851_by_ai_weiwei.html" rel="alternate"></link><published>2010-01-10T02:44:00+08:00</published><updated>2010-01-10T02:44:00+08:00</updated><author><name>funcman</name></author><id>tag:funcman.me,2010-01-10:/review_of_4851_by_ai_weiwei.html</id><summary type="html">&lt;p&gt;艾未未先生的《4851》是我看到的最深刻的艺术作品。&lt;/p&gt;
&lt;p&gt;87分钟的片长，可能没几个人会真的花87分钟完整地看完这部片子。&lt;/p&gt;
&lt;p&gt;没关 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;艾未未先生的《4851》是我看到的最深刻的艺术作品。&lt;/p&gt;
&lt;p&gt;87分钟的片长，可能没几个人会真的花87分钟完整地看完这部片子。&lt;/p&gt;
&lt;p&gt;没关系，你的观看方式已经是这部艺术作品的一部分。&lt;/p&gt;
&lt;p&gt;这是部完美的艺术作品，像一味催化剂。&lt;/p&gt;
&lt;p&gt;只要你对5·12的任何一点有所思考，它都会从理性和感性两方面触发你。&lt;/p&gt;
&lt;p&gt;你可以通过YouTube观看：&lt;a href="https://www.youtube.com/watch?v=4IZpRHDOJpg"&gt;《4851》&lt;/a&gt;（中国用户访问YouTube需要跨越GFW）&lt;/p&gt;</content><category term="others"></category><category term="艺术"></category><category term="艾未未"></category></entry><entry><title>动物保护的逻辑──小论《海豚湾》的政治正确性</title><link href="https://funcman.me/logic_of_animal_protectionism.html" rel="alternate"></link><published>2009-12-21T19:34:00+08:00</published><updated>2009-12-21T19:34:00+08:00</updated><author><name>funcman</name></author><id>tag:funcman.me,2009-12-21:/logic_of_animal_protectionism.html</id><summary type="html">&lt;p&gt;一、某些动物性情趋向于人，人们能从这些动物身上获得人道情感，保护这些动物是在维护人道主义。之所有争取一些动物 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;一、某些动物性情趋向于人，人们能从这些动物身上获得人道情感，保护这些动物是在维护人道主义。之所有争取一些动物不作为牲畜屠宰，争取一些牲口在屠宰时更快死亡以减少受虐程度，是基于这样一个泛功利的动机。&lt;/p&gt;
&lt;p&gt;二、野生动物是地球生态的重要组成部分，保护野生动物，是为了地球生态能够正常运行下去。地球生态的正常运作，才能让人们和他们的后台得以更好地生存。这也是一个功利的理由。&lt;/p&gt;
&lt;p&gt;所以即使抛弃崇高的理念，以现实利益为名，动物保护主义也是完全站得住脚的。&lt;/p&gt;
&lt;p&gt;《海豚湾》作为一部动物保护主义题材的环保纪录片，它的拍摄，是在遵从上面两个重要逻辑的前提下展开的。海豚保护组织最终在国际规则制定会议（法的层面）上，展出血淋淋的证据，给日本滥杀海豚的恶行以有力一击。这种行事方式十分成熟。&lt;/p&gt;</content><category term="others"></category><category term="电影"></category><category term="纪录片"></category><category term="动物保护"></category><category term="政治正确"></category></entry><entry><title>应该在何时判断一个指针是否为NULL</title><link href="https://funcman.me/when_should_determine_whether_a-pointer_is_null.html" rel="alternate"></link><published>2007-10-12T11:20:00+08:00</published><updated>2007-10-12T11:20:00+08:00</updated><author><name>funcman</name></author><id>tag:funcman.me,2007-10-12:/when_should_determine_whether_a-pointer_is_null.html</id><summary type="html">&lt;p&gt;今天看到一篇Blog：&lt;a href="http://fsfoundry.org/codefreak/2007/09/16/a-couple-of-things-about-pointer-to-null/"&gt;《NULL指标两三事》&lt;/a&gt;，文中谈的主题即是我这篇Blog的题目，我这里也只是对原文的做些简单的记录。&lt;/p&gt;
&lt;p&gt;文中谈到的 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;今天看到一篇Blog：&lt;a href="http://fsfoundry.org/codefreak/2007/09/16/a-couple-of-things-about-pointer-to-null/"&gt;《NULL指标两三事》&lt;/a&gt;，文中谈的主题即是我这篇Blog的题目，我这里也只是对原文的做些简单的记录。&lt;/p&gt;
&lt;p&gt;文中谈到的问题，也是我们平常出现的问题，即在操作一个指针前，我们常常在不需要判断指针是否为NULL时做了判断，而在需要判断时却想当然地把它漏掉了。&lt;/p&gt;
&lt;p&gt;例如：delete时，完全可以对一个NULL指针进行操作，而我们却要多余地加上一个&lt;code&gt;if(ptr!=NULL)&lt;/code&gt;判断；
又如：strlen时，如果参数给了一个NULL指针，就可能造成整个程序崩掉，我们却以为strlen自己会做NULL指针判读，并在获得一个NULL参数时return。&lt;/p&gt;
&lt;p&gt;另外，在原文的评论栏中有一问一答，合理地解释了为什么strlen这样的接受指针参数的函数，会不做&lt;code&gt;if(NULL==ptr)return;&lt;/code&gt;这样的操作。嗯，为了效率，这么做充分体验了C的精神。想像一下，对于一个错误的参数，检测函数的返回难道比在调用前就检测参数更省事么；何况如果同一个参数穿过层层的函数调用，一个个检测函数返回是多么可怕的事，不如在调用函数事先来个参数检测。实际上，像strlen这样的函数，也不是没有在函数内部做参数检测，只不过它用的是非常合理的assert断言机制，即满足了功能，又满足了效率。&lt;/p&gt;
&lt;p&gt;以后再操作指针时，要记得有这么回事~&lt;/p&gt;</content><category term="programming"></category><category term="C"></category><category term="C++"></category><category term="指针"></category><category term="pointer"></category></entry></feed>